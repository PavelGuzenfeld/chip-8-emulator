#ifndef VM_HPP
#define VM_HPP

#include "settings.hpp"
#include "registers.hpp"
#include "keyboard.hpp"

namespace chip8
{

class VirtualMachine
{

public:
    VirtualMachine(KeyBoard const& a_keyBoard)
    :   m_memory{}
    ,   m_stack{}
    ,   m_registers{}
    ,   m_keyBoard{a_keyBoard}
    {
        loadCharacters();
    }

private:
    void loadCharacters()
    {
        m_memory = {
            0xF0, 0x90, 0x90, 0x90, 0xF0, //0
            0xF0, 0x90, 0x90, 0x90, 0xF0, //1
            0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
            0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
            0x90, 0x90, 0xF0, 0x10, 0x10, //4
            0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
            0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
            0xF0, 0x80, 0xF0, 0x90, 0xF0, //7
            0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
            0xF0, 0x90, 0xF0, 0x90, 0xF0, //9
            0xF0, 0x90, 0xF0, 0x90, 0x90, //A
            0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
            0xF0, 0x80, 0x80, 0x80, 0xF0, //C
            0xE0, 0x90, 0x90, 0x90, 0xE0, //D
            0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
            0xF0, 0x80, 0xF0, 0x80, 0x80, //F
        };
    }

private:
    Memory m_memory;
    CallStack m_stack;
    Registers m_registers;
    KeyBoard m_keyBoard;
    
};

}   //namespace chip8

#endif //VM_HPP